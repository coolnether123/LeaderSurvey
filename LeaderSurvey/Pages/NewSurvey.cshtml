@page
@model LeaderSurvey.Pages.NewSurveyModel
@{
    ViewData["Title"] = "Create New Survey";
}

<div class="survey-editor">
    <div class="survey-editor-header">
        <h2 class="page-title"><i class="bi bi-plus-circle"></i> Create New Survey</h2>
    </div>

    <div class="survey-editor-content">
        <form method="post" id="surveyForm" class="needs-validation" novalidate>
            <!-- Survey Details -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Survey Details</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- Survey Name -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Survey.Name" class="form-label">Survey Name</label>
                                <input asp-for="Survey.Name" class="form-control" required />
                                <span asp-validation-for="Survey.Name" class="text-danger"></span>
                            </div>
                        </div>
                        <!-- Area select (with id for JS hookup) -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Survey.Area" class="form-label">Area</label>
                                <select asp-for="Survey.Area" class="form-select" id="areaSelect" required>
                                    <option value="">-- Select Area --</option>
                                    <option value="Front">Front</option>
                                    <option value="Drive">Drive</option>
                                    <option value="Kitchen">Kitchen</option>
                                    <option value="Hospitality">Hospitality</option>
                                </select>
                                <span asp-validation-for="Survey.Area" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Leader select with area filter buttons -->
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Survey.LeaderId" class="form-label">Leader</label>
                                <div class="area-filter-buttons mb-2">
                                    <div class="btn-group" role="group" aria-label="Area filters">
                                        <button type="button" class="btn btn-sm area-filter" data-area="Front">
                                            <span class="badge area-badge area-front">Front</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter" data-area="Drive">
                                            <span class="badge area-badge area-drive">Drive</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter" data-area="Kitchen">
                                            <span class="badge area-badge area-kitchen">Kitchen</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter" data-area="Hospitality">
                                            <span class="badge area-badge area-hospitality">Hospitality</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter active" data-area="">
                                            <span class="badge area-badge area-all">All</span>
                                        </button>
                                    </div>
                                </div>
                                <select asp-for="Survey.LeaderId" id="leaderSelect" class="form-select" required>
                                    <option value="">-- Select Leader --</option>
                                    @foreach (var leader in Model.Leaders)
                                    {
                                        <option value="@leader.Id" data-area="@leader.Area">@leader.Name</option>
                                    }
                                </select>
                                <span asp-validation-for="Survey.LeaderId" class="text-danger"></span>
                            </div>
                        </div>
                        <!-- Month/Year -->
                        <div class="col-md-6">
                            <div class="mb-3" style="margin-top: 32px;">
                                <div class="d-flex align-items-center" style="height: 24px; margin-bottom: 8px;">
                                    <label asp-for="Survey.MonthYear" class="form-label mb-0">Month/Year</label>
                                </div>
                                <div>
                                    <input type="month" asp-for="Survey.MonthYear" class="form-control month-year-input" required />
                                    <span asp-validation-for="Survey.MonthYear" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Description -->
                    <div class="mb-3">
                        <label asp-for="Survey.Description" class="form-label">Description</label>
                        <textarea asp-for="Survey.Description" class="form-control" rows="3"></textarea>
                    </div>
                </div>
            </div>

            <!-- Questions Section -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        Questions <span id="question-counter" class="badge bg-primary">0/10</span>
                    </h5>
                    <div>
                        <button type="button" class="btn btn-outline-primary btn-sm me-2" onclick="previewSurvey()" disabled title="Coming soon">
                            <i class="bi bi-plus-circle"></i> Preview Survey
                        </button>
                        <button type="button" class="btn btn-primary btn-sm" onclick="addNewQuestionRow(event)" data-role="add-question">
                            <i class="bi bi-plus-circle"></i> Add Question
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="questionsTable" class="table table-cfa">
                            <thead>
                                <tr>
                                    <th style="width: 60px">#</th>
                                    <th>Question</th>
                                    <th style="width: 120px">Type</th>
                                    <th style="width: 100px">Actions</th>
                                    <th style="width: 40px"></th>
                                </tr>
                            </thead>
                            <tbody id="questionsContainer">
                                <!-- Questions will be added here dynamically -->
                                <!-- Optionally, you can include an example row or leave it empty -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="d-flex justify-content-end gap-2">
                <a href="/Surveys" class="btn btn-secondary">Cancel</a>
                <button type="submit" class="btn btn-primary">Save Survey</button>
            </div>
        </form>
    </div>
</div>

<!-- Question Modal (if you want to use a modal for adding/editing questions) -->
<div class="modal fade" id="questionModal" tabindex="-1" aria-labelledby="questionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="questionModalLabel">Add New Question</h5>
                <button type="button" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="questionForm" class="needs-validation" novalidate>
                    <input type="hidden" id="questionIndex" value="" />
                    <div class="mb-3">
                        <label for="questionText" class="form-label">Question Text</label>
                        <input type="text" class="form-control" id="questionText" required>
                        <div class="invalid-feedback">Please enter the question text.</div>
                    </div>
                    <div class="mb-3">
                        <label for="questionType" class="form-label">Question Type</label>
                        <select class="form-select" id="questionType" required>
                            <option value="yesno" selected>Yes/No</option>
                            <option value="score">Score (0-10)</option>
                        </select>
                        <div class="invalid-feedback">Please select a question type.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveQuestion()">Save Question</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        // -------------------------------
        // QUESTION FUNCTIONALITY
        // -------------------------------
        // Global array to track questions
        let questions = [];

        function getAddQuestionButton() {
            return document.querySelector('[data-role="add-question"]');
        }

        window.addNewQuestionRow = function(event) {
            if (event) event.preventDefault();
            
            if (questions.length >= 10) {
                alert('Maximum of 10 questions allowed');
                return;
            }

            const tbody = document.getElementById('questionsContainer');
            const tr = document.createElement('tr');
            tr.dataset.isNew = 'true';
            tr.dataset.index = questions.length.toString();
            
            tr.innerHTML = `
                <td>${questions.length + 1}</td>
                <td>
                    <input type="text" class="form-control" placeholder="Enter question text" required>
                </td>
                <td>
                    <select class="form-select">
                        <option value="yesno">Yes/No</option>
                        <option value="score">Score (0-10)</option>
                    </select>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-success me-2" onclick="saveQuestionRow(this)">
                        <i class="bi bi-check-lg"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeQuestionRow(this)">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </td>
                <td>
                    <i class="bi bi-grip-vertical drag-handle"></i>
                </td>
            `;

            tbody.appendChild(tr);
            tr.querySelector('input').focus({preventScroll: true});
            
            // Disable the Add Question button while editing
            const addButton = getAddQuestionButton();
            if (addButton) addButton.disabled = true;
            
            updateQuestionCounter();
        };

        window.saveQuestionRow = function(button) {
            const row = button.closest('tr');
            const questionText = row.querySelector('input').value.trim();
            const questionType = row.querySelector('select').value;
            const index = parseInt(row.dataset.index);

            if (!questionText) {
                alert('Question text is required');
                return;
            }

            if (row.dataset.isNew === 'true') {
                questions.push({
                    text: questionText,
                    type: questionType
                });
                row.dataset.isNew = 'false';
            } else {
                questions[index] = {
                    text: questionText,
                    type: questionType
                };
            }

            row.innerHTML = `
                <td class="question-number">${index + 1}</td>
                <td>${questionText}</td>
                <td>${questionType === 'yesno' ? 'Yes/No' : 'Score 1-5'}</td>
                <td>
                    <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="editQuestionRow(this)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeQuestionRow(this)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </td>
                <td>
                    <i class="bi bi-grip-vertical drag-handle"></i>
                </td>
            `;

            // Re-enable the Add Question button after saving
            const addButton = getAddQuestionButton();
            if (addButton) addButton.disabled = false;

            updateQuestionCounter();
            updateQuestionsInput();
        };

        window.removeQuestionRow = function(button) {
            const row = button.closest('tr');
            const index = parseInt(row.dataset.index);
            
            if (confirm('Are you sure you want to delete this question?')) {
                // Remove from questions array if it's a saved question
                if (row.dataset.isNew !== 'true') {
                    questions.splice(index, 1);
                }
                
                // Remove the row
                row.remove();
                
                // Update indices for remaining rows
                document.querySelectorAll('#questionsContainer tr').forEach((row, idx) => {
                    row.dataset.index = idx.toString();
                    row.querySelector('td:first-child').textContent = (idx + 1).toString();
                });
                
                // Update counter and form inputs
                updateQuestionCounter();
                updateQuestionsInput();
                
                // Re-enable add button if needed
                const addButton = getAddQuestionButton();
                if (addButton) addButton.disabled = false;
            }
        };

        window.editQuestionRow = function(button) {
            const row = button.closest('tr');
            const index = parseInt(row.dataset.index);
            const question = questions[index];
            
            row.innerHTML = `
                <td>${row.cells[0].textContent}</td>
                <td>
                    <input type="text" class="form-control" value="${question.text}" required>
                </td>
                <td>
                    <select class="form-select">
                        <option value="yesno" ${question.type === 'yesno' ? 'selected' : ''}>Yes/No</option>
                        <option value="score" ${question.type === 'score' ? 'selected' : ''}>Score (0-10)</option>
                    </select>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-success me-2" onclick="saveQuestionRow(this)">
                        <i class="bi bi-check-lg"></i>
                    </button>
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeQuestionRow(this)">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </td>
                <td>
                    <i class="bi bi-grip-vertical drag-handle"></i>
                </td>
            `;
            
            row.querySelector('input').focus();
            
            // Disable the Add Question button while editing
            const addButton = getAddQuestionButton();
            if (addButton) addButton.disabled = true;
        };

        function updateQuestionCounter() {
            const counter = document.getElementById('question-counter');
            const currentCount = questions.length;
            const hasNewQuestion = document.querySelector('#questionsContainer tr[data-is-new="true"]') !== null;
            
            counter.textContent = `${currentCount}/10`;

            const addButton = getAddQuestionButton();
            if (addButton) {
                addButton.disabled = currentCount >= 10 || hasNewQuestion;
            }
        }

        function updateQuestionsInput() {
            // Append hidden inputs so questions post back with the form
            const form = document.getElementById('surveyForm');
            // Remove any previously added hidden inputs to avoid duplicates
            form.querySelectorAll('input[type="hidden"][name^="Survey.Questions"]').forEach(el => el.remove());
            questions.forEach((q, index) => {
                const textInput = document.createElement('input');
                textInput.type = 'hidden';
                textInput.name = `Survey.Questions[${index}].Text`;
                textInput.value = q.text;

                const typeInput = document.createElement('input');
                typeInput.type = 'hidden';
                typeInput.name = `Survey.Questions[${index}].QuestionType`;
                typeInput.value = q.type;

                form.appendChild(textInput);
                form.appendChild(typeInput);
            });
        }

        // -------------------------------
        // AREA FILTER & LEADER SELECTION
        // -------------------------------
        document.addEventListener('DOMContentLoaded', function() {
            updateQuestionCounter();

            const areaSelect = document.getElementById('areaSelect');
            const leaderSelect = document.getElementById('leaderSelect');
            const areaFilterButtons = document.querySelectorAll('.area-filter');
            
            // Area filter button clicks
            areaFilterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    areaFilterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    filterLeadersByArea(this.dataset.area);
                });
            });

            // When manually selecting an area, don't filter leaders
            if (areaSelect) {
                areaSelect.addEventListener('change', function() {
                    // Just clear the filter buttons
                    areaFilterButtons.forEach(btn => btn.classList.remove('active'));
                    // Find and activate the "All" button
                    const allButton = document.querySelector('.area-filter[data-area=""]');
                    if (allButton) allButton.classList.add('active');
                    // Show all leaders
                    filterLeadersByArea('');
                });
            }
            
            // Auto-update area select when a leader is chosen
            leaderSelect.addEventListener('change', function() {
                const selectedOption = leaderSelect.options[leaderSelect.selectedIndex];
                if (selectedOption.value && areaSelect && !areaSelect.value) {
                    areaSelect.value = selectedOption.dataset.area;
                }
            });

            function filterLeadersByArea(selectedArea) {
                const leaderSelect = document.getElementById('leaderSelect');
                
                Array.from(leaderSelect.options).forEach(option => {
                    if (option.value === "") return; // skip placeholder
                    option.style.display = (!selectedArea || option.dataset.area === selectedArea) ? '' : 'none';
                });
            }
        });
    </script>

    <!-- Inline styles for area buttons and inputs -->
    <style>
        .area-filter-buttons {
            margin-bottom: 10px;
            height: 24px;
        }
        
        .area-filter {
            border: none !important;
            background: none;
            padding: 4px 8px;
            box-shadow: none !important;
            outline: none !important;
        }
        
        .area-filter:focus {
            box-shadow: none !important;
            outline: none !important;
        }
        
        .area-filter.active {
            background-color: #e9ecef;
            border-radius: 4px;
        }
        
        .area-badge {
            font-size: 0.875rem;
            padding: 5px 10px;
            border-radius: 4px;
        }
        
        .area-front { background-color: #28a745; color: white; }
        .area-drive { background-color: #007bff; color: white; }
        .area-kitchen { background-color: #dc3545; color: white; }
        .area-hospitality { background-color: #6f42c1; color: white; }
        .area-all { background-color: #212529; color: white; }
        .month-year-input {
            width: 180px !important;
        }
    </style>
}
