@page
@model LeaderSurvey.Pages.NewSurveyModel
@{
    ViewData["Title"] = "Create New Survey";
}

<div class="survey-editor">
    <div class="survey-editor-header">
        <h2 class="page-title"><i class="bi bi-plus-circle"></i> Create New Survey</h2>
    </div>

    <div class="survey-editor-content">
        <form method="post" id="surveyForm" class="needs-validation" novalidate>
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Survey Details</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Survey.Name" class="form-label">Survey Name</label>
                                <input asp-for="Survey.Name" class="form-control" required />
                                <span asp-validation-for="Survey.Name" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Survey.Area" class="form-label">Area</label>
                                <select asp-for="Survey.Area" class="form-select" id="areaSelect" required>
                                    <option value="">-- Select Area --</option>
                                    <option value="Front">Front</option>
                                    <option value="Drive">Drive</option>
                                    <option value="Kitchen">Kitchen</option>
                                    <option value="Hospitality">Hospitality</option>
                                </select>
                                <span asp-validation-for="Survey.Area" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Survey.LeaderId" class="form-label">Leader</label>
                                <div class="area-filter-buttons mb-2">
                                    <div class="btn-group" role="group" aria-label="Area filters">
                                        <button type="button" class="btn btn-sm area-filter" data-area="Front">
                                            <span class="badge area-badge area-front">Front</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter" data-area="Drive">
                                            <span class="badge area-badge area-drive">Drive</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter" data-area="Kitchen">
                                            <span class="badge area-badge area-kitchen">Kitchen</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter" data-area="Hospitality">
                                            <span class="badge area-badge area-hospitality">Hospitality</span>
                                        </button>
                                        <button type="button" class="btn btn-sm area-filter active" data-area="">
                                            <span class="badge area-badge">All</span>
                                        </button>
                                    </div>
                                </div>
                                <select asp-for="Survey.LeaderId" id="leaderSelect" class="form-select" required>
                                    <option value="">-- Select Leader --</option>
                                    @foreach (var leader in Model.Leaders)
                                    {
                                        <option value="@leader.Id" data-area="@leader.Area">@leader.Name</option>
                                    }
                                </select>
                                <span asp-validation-for="Survey.LeaderId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Survey.MonthYear" class="form-label">Month/Year</label>
                                <input type="month" asp-for="Survey.MonthYear" class="form-control" required />
                                <span asp-validation-for="Survey.MonthYear" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label asp-for="Survey.Description" class="form-label">Description</label>
                        <textarea asp-for="Survey.Description" class="form-control" rows="3"></textarea>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Questions <span id="question-counter" class="badge bg-primary">0/10</span></h5>
                    <div>
                        <button type="button" class="btn btn-outline-primary btn-sm me-2" onclick="previewSurvey()" disabled title="Coming soon">
                            <i class="bi bi-plus-circle"></i> Preview Survey
                        </button>
                        <button type="button" class="btn btn-primary btn-sm" onclick="addNewQuestionRow(event)" data-role="add-question">
                            <i class="bi bi-plus-circle"></i> Add Question
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="questionsTable" class="table table-cfa">
                            <thead>
                                <tr>
                                    <th style="width: 60px">#</th>
                                    <th>Question</th>
                                    <th style="width: 120px">Type</th>
                                    <th style="width: 100px">Actions</th>
                                    <th style="width: 40px"></th>
                                </tr>
                            </thead>
                            <tbody id="questionsContainer">
                                <!-- Questions will be added here dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end gap-2">
                <a href="/Surveys" class="btn btn-secondary">Cancel</a>
                <button type="submit" class="btn btn-primary">Save Survey</button>
            </div>
        </form>
    </div>
</div>

<!-- Question Modal -->
<div class="modal fade" id="questionModal" tabindex="-1" aria-labelledby="questionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="questionModalLabel">Add New Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="questionForm" class="needs-validation" novalidate>
                    <input type="hidden" id="questionIndex" value="" />
                    <div class="mb-3">
                        <label for="questionText" class="form-label">Question Text</label>
                        <input type="text" class="form-control" id="questionText" required>
                        <div class="invalid-feedback">Please enter the question text.</div>
                    </div>
                    <div class="mb-3">
                        <label for="questionType" class="form-label">Question Type</label>
                        <select class="form-select" id="questionType" required>
                            <option value="yesno" selected>Yes/No</option>
                            <option value="score">Score (0-10)</option>
                        </select>
                        <div class="invalid-feedback">Please select a question type.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveQuestion()">Save Question</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const areaSelect = document.getElementById('areaSelect');
            const leaderSelect = document.getElementById('leaderSelect');
            const areaFilterButtons = document.querySelectorAll('.area-filter');
            
            // Handle area filter button clicks
            areaFilterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Update button states
                    areaFilterButtons.forEach(btn => btn.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Get selected area and update filters
                    const selectedArea = this.dataset.area;
                    filterLeadersByArea(selectedArea);
                    
                    // Update main area select if it exists
                    if (areaSelect) {
                        areaSelect.value = selectedArea;
                        areaSelect.dispatchEvent(new Event('change'));
                    }
                });
            });

            // Handle main area select changes
            if (areaSelect) {
                areaSelect.addEventListener('change', function() {
                    filterLeadersByArea(this.value);
                    
                    // Update filter buttons
                    areaFilterButtons.forEach(btn => {
                        btn.classList.toggle('active', btn.dataset.area === this.value);
                    });
                });
            }
            
            // Handle leader selection
            leaderSelect.addEventListener('change', function() {
                const selectedOption = leaderSelect.options[leaderSelect.selectedIndex];
                if (selectedOption.value && areaSelect && !areaSelect.value) {
                    const leaderArea = selectedOption.dataset.area;
                    areaSelect.value = leaderArea;
                    areaSelect.dispatchEvent(new Event('change'));
                    
                    // Update filter buttons
                    areaFilterButtons.forEach(btn => {
                        btn.classList.toggle('active', btn.dataset.area === leaderArea);
                    });
                }
            });

            function filterLeadersByArea(selectedArea) {
                const options = leaderSelect.options;
                
                // Show/hide options based on area
                Array.from(options).forEach(option => {
                    if (option.value === "") return; // Skip placeholder option
                    
                    if (!selectedArea || option.dataset.area === selectedArea) {
                        option.style.display = '';
                    } else {
                        option.style.display = 'none';
                    }
                });
                
                // Clear selection if current selection is not in filtered list
                if (leaderSelect.selectedIndex > 0) {
                    const selectedOption = leaderSelect.options[leaderSelect.selectedIndex];
                    if (selectedOption.style.display === 'none') {
                        leaderSelect.value = '';
                    }
                }
            }
        });
    </script>

    <style>
        .area-filter-buttons {
            margin-bottom: 10px;
        }
        
        .area-filter {
            border: none;
            background: none;
            padding: 4px 8px;
        }
        
        .area-filter.active {
            background-color: #e9ecef;
            border-radius: 4px;
        }
        
        .area-badge {
            font-size: 0.875rem;
            padding: 5px 10px;
            border-radius: 4px;
        }
        
        .area-front { background-color: #28a745; color: white; }
        .area-drive { background-color: #007bff; color: white; }
        .area-kitchen { background-color: #dc3545; color: white; }
        .area-hospitality { background-color: #6f42c1; color: white; }
    </style>
}
