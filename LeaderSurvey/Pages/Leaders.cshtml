@page
@model LeaderSurvey.Pages.LeadersModel
@{
    ViewData["Title"] = "Leaders";
}
@Html.AntiForgeryToken()

<h2 class="page-title"><i class="bi bi-people-fill"></i> Leaders Management</h2>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="filters-section">
            <select id="areaFilter" class="form-select" aria-label="Filter by area">
                <option value="">All Areas</option>
                <option value="Drive">Drive</option>
                <option value="Front">Front</option>
                <option value="Kitchen">Kitchen</option>
                <option value="Hospitality">Hospitality</option>
            </select>
        </div>
        <button class="btn btn-primary" onclick="showAddLeaderModal()">
            <i class="bi bi-person-plus-fill"></i> Add New Leader
        </button>
    </div>

    <div class="table-responsive">
        <table id="leadersTable" class="table table-cfa">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Area</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Leaders != null && Model.Leaders.Any())
                {
                    @foreach (var leader in Model.Leaders)
                    {
                        <tr data-id="@leader.Id">
                            <td>@leader.Name</td>
                            <td>
                                <span class="badge area-badge area-@leader.Area.ToLower()">@leader.Area</span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn btn-sm btn-outline-primary me-2" onclick="editLeader(@leader.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteLeader(@leader.Id, '@leader.Name')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Add/Edit Leader Modal -->
<div class="modal fade" id="leaderModal" tabindex="-1" aria-labelledby="leaderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="leaderModalLabel">Add New Leader</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" id="leaderForm" class="needs-validation" novalidate>
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="leaderId" name="Id" />
                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="Name" name="NewLeader.Name" required>
                        <div class="invalid-feedback">Please enter the leader's name.</div>
                    </div>
                    <div class="mb-3">
                        <label for="Area" class="form-label">Area</label>
                        <select class="form-control" id="Area" name="NewLeader.Area" required>
                            <option value="">Select Area</option>
                            <option value="Front">Front</option>
                            <option value="Drive">Drive</option>
                            <option value="Kitchen">Kitchen</option>
                            <option value="Hospitality">Hospitality</option>
                        </select>
                        <div class="invalid-feedback">Please select an area.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="leaderForm" class="btn btn-primary">Save Leader</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let leaderModal;
        
        document.addEventListener('DOMContentLoaded', function() {
            leaderModal = new bootstrap.Modal(document.getElementById('leaderModal'));
            setupFilters();
            
            const form = document.getElementById('leaderForm');
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                try {
                    const name = document.getElementById('Name').value.trim();
                    const area = document.getElementById('Area').value.trim();

                    if (!name || !area) {
                        showNotification('Name and Area are required', 'error');
                        return;
                    }

                    console.log('Submitting form with:', { name, area });

                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    
                    const response = await fetch('?handler=Post', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({
                            newLeader: {
                                name: name,
                                area: area
                            }
                        })
                    });

                    const responseData = await response.json();
                    console.log('Response data:', responseData);

                    if (responseData.success) {
                        // Ensure table exists and has proper structure
                        let table = document.getElementById('leadersTable');
                        if (!table) {
                            table = createLeadersTable();
                            document.querySelector('.table-responsive').appendChild(table);
                        }

                        let tbody = table.querySelector('tbody');
                        if (!tbody) {
                            tbody = document.createElement('tbody');
                            table.appendChild(tbody);
                        }

                        // Create and append the new row
                        const newRow = document.createElement('tr');
                        newRow.dataset.id = responseData.id;
                        newRow.innerHTML = `
                            <td>${responseData.name}</td>
                            <td><span class="badge area-badge area-${responseData.area.toLowerCase()}">${responseData.area}</span></td>
                            <td>
                                <div class="action-buttons">
                                    <button class="btn btn-sm btn-outline-primary me-2" onclick="editLeader(${responseData.id})">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" onclick="deleteLeader(${responseData.id}, '${responseData.name}')">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        `;
                        tbody.appendChild(newRow);
                        
                        // Reset form and close modal
                        form.reset();
                        form.classList.remove('was-validated');
                        leaderModal.hide();
                        
                        showNotification('My Pleasure! Leader saved successfully', 'success');
                    } else {
                        showNotification(responseData.message || 'Failed to save leader', 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('An error occurred while saving the leader', 'error');
                }
            });
        });

        function showAddLeaderModal() {
            document.getElementById('leaderModalLabel').textContent = 'Add New Leader';
            document.getElementById('leaderForm').reset();
            document.getElementById('leaderId').value = '';
            leaderModal.show();
        }

        function editLeader(id) {
            const row = document.querySelector(`tr[data-id="${id}"]`);
            const name = row.cells[0].textContent;
            const area = row.cells[1].querySelector('.badge').textContent;

            document.getElementById('leaderModalLabel').textContent = 'Edit Leader';
            document.getElementById('leaderId').value = id;
            document.getElementById('Name').value = name;
            document.getElementById('Area').value = area;
            
            leaderModal.show();
        }

        function deleteLeader(id, name) {
            if (confirm(`Are you sure you want to delete ${name}?`)) {
                fetch(`?handler=Delete&id=${id}`, {
                    method: 'GET',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.querySelector(`tr[data-id="${id}"]`).remove();
                        showNotification('Leader deleted successfully', 'success');
                    }
                })
                .catch(error => showNotification('Error deleting leader', 'danger'));
            }
        }

        function setupFilters() {
            const areaFilter = document.getElementById('areaFilter');
            const rows = document.querySelectorAll('#leadersTable tbody tr');

            areaFilter.addEventListener('change', function() {
                const selectedArea = this.value.toLowerCase();
                
                rows.forEach(row => {
                    const areaCell = row.querySelector('.area-badge');
                    const rowArea = areaCell.textContent.toLowerCase();
                    
                    if (!selectedArea || rowArea === selectedArea) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        }

        function createLeadersTable() {
            const table = document.createElement('table');
            table.id = 'leadersTable';
            table.className = 'table table-cfa';
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Area</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody></tbody>
            `;
            return table;
        }
    </script>
}
